import streamlit as st
from transformers import VisionEncoderDecoderModel, ViTFeatureExtractor, AutoTokenizer
import torch
from PIL import Image
import io

# Set up Streamlit page
st.set_page_config(page_title="Image Captioning App", page_icon="ðŸ“¸")
st.title("ðŸ“¸ Image Captioning with ViT-GPT2")
st.markdown("Upload an image and get descriptive captions generated by a powerful AI model.")

# Load the model, feature extractor, and tokenizer
@st.cache_resource
def load_model_components():
    model = VisionEncoderDecoderModel.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
    feature_extractor = ViTFeatureExtractor.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
    tokenizer = AutoTokenizer.from_pretrained("nlpconnect/vit-gpt2-image-captioning")
    return model, feature_extractor, tokenizer

model, feature_extractor, tokenizer = load_model_components()

# Check if there is any gpu available if not we will use the cpu
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Create a dictionary with these parameters
max_length = 16
num_beams = 4
num_return_sequences = 3 # This is now part of gen_kwargs as per your original code
gen_kwargs = {"max_length": max_length, "num_beams": num_beams, "num_return_sequences": num_return_sequences}

# This function uses a combination of computer vision and natural language
# processing techniques to generate textual descriptions or captions of an input image.
def predict_step(image_pil):
    # The original code used Image.fromarray(image.astype('uint8'), 'RGB')
    # For Streamlit's st.file_uploader, image_pil is already a PIL Image
    if image_pil.mode != "RGB":
        image_pil = image_pil.convert("RGB")

    pixel_values = feature_extractor(images=image_pil, return_tensors="pt").pixel_values
    pixel_values = pixel_values.to(device)

    # Use the gen_kwargs directly
    output_ids = model.generate(pixel_values, **gen_kwargs)
    
    preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)
    preds = [pred.strip() for pred in preds]
    return tuple(preds)

# --- Streamlit UI ---
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image.', use_column_width=True)
    st.write("")
    st.write("Generating captions...")

    with st.spinner('Thinking...'):
        captions = predict_step(image)
    
    st.success("Captions Generated!")
    st.markdown("---")
    st.subheader("Generated Captions:")
    for i, caption in enumerate(captions):
        st.write(f"**Caption {i+1}:** {caption}")
    st.markdown("---")

st.markdown("""
---
**How it works:**
This app uses a pre-trained Vision Encoder-Decoder Model (ViT-GPT2) from Hugging Face Transformers to generate multiple descriptive captions for images.
The model leverages both computer vision (ViT) and natural language processing (GPT-2) techniques.
""")
